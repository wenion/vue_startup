import { Arrayable, Awaitable } from '@antfu/utils';
import { FilterPattern } from '@rollup/pluginutils';
import { Import } from 'unimport';

declare const presets: {
    ahooks: () => ___types.ImportsMap;
    '@nuxtjs/composition-api': ___types.ImportsMap;
    '@vue/composition-api': ___types.ImportsMap;
    '@vueuse/core': () => ___types.ImportsMap;
    '@vueuse/head': ___types.ImportsMap;
    mobx: ___types.ImportsMap;
    'mobx-react-lite': ___types.ImportsMap;
    pinia: ___types.ImportsMap;
    preact: ___types.ImportsMap;
    quasar: ___types.ImportsMap;
    react: ___types.ImportsMap;
    'react-router': ___types.ImportsMap;
    'react-router-dom': ___types.ImportsMap;
    'react-i18next': ___types.ImportsMap;
    svelte: ___types.ImportsMap;
    'svelte/animate': ___types.ImportsMap;
    'svelte/easing': ___types.ImportsMap;
    'svelte/motion': ___types.ImportsMap;
    'svelte/store': ___types.ImportsMap;
    'svelte/transition': ___types.ImportsMap;
    'vee-validate': ___types.ImportsMap;
    vitepress: ___types.ImportsMap;
    'vue-demi': ___types.ImportsMap;
    'vue-i18n': ___types.ImportsMap;
    'vue-router': ___types.ImportsMap;
    vue: ___types.ImportsMap;
    'vue/macros': ___types.ImportsMap;
    vuex: ___types.ImportsMap;
    vitest: ___types.ImportsMap;
    'uni-app': ___types.ImportsMap;
    'solid-js': ___types.ImportsMap;
    'solid-app-router': ___types.ImportsMap;
    jotai: ___types.ImportsMap;
    'jotai/utils': ___types.ImportsMap;
};
declare type PresetName = keyof typeof presets;

interface ImportLegacy {
    /**
     * @deprecated renamed to `as`
     */
    name?: string;
    /**
     * @deprecated renamed to `name`
     */
    importName?: string;
    /**
     * @deprecated renamed to `from`
     */
    path: string;
    sideEffects?: SideEffectsInfo;
}
interface ImportExtended extends Import {
    sideEffects?: SideEffectsInfo;
    __source?: 'dir' | 'resolver';
}
declare type ImportNameAlias = [string, string];
declare type SideEffectsInfo = Arrayable<ResolverResult | string> | undefined;
interface ResolverResult {
    as?: string;
    name?: string;
    from: string;
}
declare type ResolverFunction = (name: string) => Awaitable<string | ResolverResult | ImportExtended | null | undefined | void>;
interface ResolverResultObject {
    type: 'component' | 'directive';
    resolve: ResolverFunction;
}
/**
 * Given a identifier name, returns the import path or an import object
 */
declare type Resolver = ResolverFunction | ResolverResultObject;
/**
 * module, name, alias
 */
declare type ImportsMap = Record<string, (string | ImportNameAlias)[]>;
declare type ESLintGlobalsPropValue = boolean | 'readonly' | 'readable' | 'writable' | 'writeable';
interface ESLintrc {
    /**
     * @default false
     */
    enabled?: boolean;
    /**
     * Filepath to save the generated eslint config
     *
     * @default './.eslintrc-auto-import.json'
     */
    filepath?: string;
    /**
     * @default true
     */
    globalsPropValue?: ESLintGlobalsPropValue;
}
interface Options {
    /**
     * Preset names or custom imports map
     *
     * @default []
     */
    imports?: Arrayable<ImportsMap | PresetName>;
    /**
     * Identifiers to be ignored
     */
    ignore?: (string | RegExp)[];
    /**
     * Path for directories to be auto imported
     */
    dirs?: string[];
    /**
     * Pass a custom function to resolve the component importing path from the component name.
     *
     * The component names are always in PascalCase
     */
    resolvers?: Arrayable<Arrayable<Resolver>>;
    /**
     * Filepath to generate corresponding .d.ts file.
     * Default enabled when `typescript` is installed locally.
     * Set `false` to disable.
     *
     * @default './auto-imports.d.ts'
     */
    dts?: string | boolean;
    /**
     * Auto import inside Vue templates
     *
     * @see https://github.com/unjs/unimport/pull/15
     * @default false
     */
    vueTemplate?: boolean;
    /**
     * Allow overriding imports sources from multiple presets.
     *
     * @default false
     */
    presetOverriding?: boolean;
    /**
     * Rules to include transforming target.
     *
     * @default [/\.[jt]sx?$/, /\.vue\??/]
     */
    include?: FilterPattern;
    /**
     * Rules to exclude transforming target.
     *
     * @default [/node_modules/, /\.git/]
     */
    exclude?: FilterPattern;
    /**
     * Generate source map.
     *
     * @default false
     */
    sourceMap?: boolean;
    /**
     * Generate corresponding .eslintrc-auto-import.json file.
     */
    eslintrc?: ESLintrc;
}

export { ESLintGlobalsPropValue, ESLintrc, ImportExtended, ImportLegacy, ImportNameAlias, ImportsMap, Options, PresetName, Resolver, ResolverFunction, ResolverResult, ResolverResultObject, SideEffectsInfo };
